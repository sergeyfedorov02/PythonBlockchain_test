import sys
import random
import random
import json

import blockchain.node as node
import blockchain.block as block


def test_node_init():
    for i in range(100):
        server_id = random.randint(1, 3)
        new_node = node.Node(server_id)

        assert new_node is not None

        assert new_node.server_id == server_id
        assert new_node.block_index is None
        assert len(new_node.blocks_array) == 0


def test_block_handler_genesis():
    server_id = random.randint(1, 3)
    current_node = node.Node(server_id)
    genesis_block = block.create_genesis()

    assert current_node.server_id == server_id
    assert current_node.block_index is None
    assert len(current_node.blocks_array) == 0

    current_node.block_handler(genesis_block)

    assert current_node.server_id == server_id
    assert current_node.block_index == 0
    assert len(current_node.blocks_array) == 1


def test_block_handler_not_genesis():
    node_server_id = random.randint(1, 3)
    current_node = node.Node(node_server_id)

    for i in range(100):
        block_server_id = random.randint(1, 3)
        last_index = random.randint(1, 1000)
        prev_hash = 'This is Last block in Node'
        nonce_type = random.randint(1, 3)

        last_block_in_node_array = block.create_new_block(last_index, prev_hash, nonce_type,
                                                          block_server_id).block_to_json()

        current_node.block_index = last_index
        current_node.blocks_array.append(last_block_in_node_array)

        answer_false = current_node.block_handler(last_block_in_node_array)
        assert answer_false is False

        last_block_array_length = len(current_node.blocks_array)

        new_index = random.randint(1, 1000)
        new_prev_hash = 'This is new Received block'
        new_received_block = block.create_new_block(new_index, new_prev_hash, nonce_type,
                                                    block_server_id).block_to_json()

        answer_block_handler = current_node.block_handler(new_received_block)

        if new_index > last_index:
            assert answer_block_handler is True
            assert current_node.block_index == new_index
            assert len(current_node.blocks_array) == last_block_array_length + 1
        else:
            assert answer_block_handler is False
            assert current_node.block_index == last_index
            assert len(current_node.blocks_array) == last_block_array_length


def test_block_to_string():
    for i in range(100):
        block_index = random.randint(1, 100000)
        nonce_type = random.randint(1, 3)
        prev_hash = 'This is old String block'
        server_id = random.randint(1, 3)

        new_block = block.create_new_block(block_index, prev_hash, nonce_type, server_id)

        json_block = new_block.block_to_json()
        assert type(json_block) == str

        python_object = json.loads(json_block)

        string_block = node.block_to_string(python_object)
        assert type(string_block) == str

        generated_by = int(string_block.split('This block generated by Node [')[1].split(']:')[0])
        index = int(string_block.split('Index = ')[1].split(', Hash')[0])
        cur_hash = string_block.split(', Hash = ')[1].split(', Prev_Hash')[0]
        prev_hash = string_block.split('Prev_Hash = ')[1].split(', Data')[0]
        data = string_block.split('Data = ')[1].split(', Nonce')[0]
        nonce = int(string_block.split('Nonce = ')[1])

        assert generated_by == new_block.server_id[0]
        assert index == new_block.index
        assert cur_hash == new_block.hash
        assert prev_hash == new_block.prev_hash
        assert data == new_block.data
        assert nonce == new_block.nonce