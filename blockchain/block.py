import json
import random
import string
from hashlib import sha256


class Block:
    def __init__(self, index, prev_hash, nonce_type, server_id):
        self.hash = None  # Хэш текущего блока - string
        self.data = None  # Данные в виде строки из 256 символов
        self.index = index  # Номер по возрастанию текущего блока
        self.server_id = server_id,
        self.prev_hash = prev_hash  # Хэш предыдущего блока - string
        self.nonce = 1  # Дополнение, чтобы выполнялось требование по хэшированию
        self.generate_random_data(256)  # Генерация data
        self.generate_hash(nonce_type)  # Генерация hash

    # Функция для генерации случайной строки из 256 символов
    def generate_random_data(self, length):
        letters = string.ascii_lowercase
        rand_string = ''.join(random.choice(letters) for _ in range(length))
        self.data = rand_string

    # Функция для генерации текущего Hash с учетом того, что последние 4 символа == "0000"
    def generate_hash(self, nonce_type):
        current_string = str(self.index) + self.prev_hash + self.data + str(self.nonce)
        current_hash = sha256(current_string.encode('utf-8'))

        while current_hash.hexdigest()[-4:] != "0000":
            if nonce_type == 1:
                self.nonce += random.randint(1, 10)
            elif nonce_type == 2:
                self.nonce += random.randint(11, 20)
            else:
                self.nonce += random.randint(21, 30)

            current_string = str(self.index) + self.prev_hash + self.data + str(self.nonce)
            current_hash = sha256(current_string.encode('utf-8'))

        self.hash = current_hash.hexdigest()

    def block_to_json(self):
        json_dictionary = {
            'This block generated by Node ': self.server_id,
            'index': self.index,
            'hash': self.hash,
            'prev_hash': self.prev_hash,
            'data': self.data,
            'nonce': self.nonce
        }

        return json.dumps(json_dictionary)


# Генерация генезиса
def create_genesis():
    genesis_block = create_new_block(0, 'GENESIS', 1, -1)
    return genesis_block.block_to_json()


# Генерация нового блока
def create_new_block(index, _prev_hash, nonce_type, server_id):
    return Block(index, _prev_hash, nonce_type, server_id)